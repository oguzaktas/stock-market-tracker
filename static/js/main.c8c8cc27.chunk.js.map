{"version":3,"sources":["logo.svg","iex.js","stock.js","components/StockRow.js","components/StockList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","iex","stock","latestPrice","ticker","callback","fetch","latestPriceURL","then","response","json","data","formatPriceData","stockData","length","formattedData","price","close","date","time","label","numberOfTrades","getYesterdaysClose","lastTradingDate","undefined","url","yesterdaysCloseURL","formatDate","getLastTradingDate","today","Date","toISOString","split","replace","StockRow","props","state","dollar_change","percent_change","color","this","fontSize","marginLeft","formattedPrice","toFixed","setState","applyData","bind","prevProps","setCanRetrieveClose","canRetrieveClose","yesterday","name","className","style","changeStyle","Component","StockList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8c8cc27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const iex = {\n    // api_token: 'pk_12ff756a55f3487285968715b4e7e7d1',\n    api_token: 'pk_5257610957ea48a78b4ad56e6f46b3fb',\n    base_url: 'https://cloud.iexapis.com/stable'\n};\n","import { iex } from './iex.js';\n\nexport const stock = {\n\n    latestPrice: (ticker, callback) => {\n        fetch(stock.latestPriceURL(ticker))\n        .then((response) => response.json())\n        .then((data) => callback(stock.formatPriceData(data)))\n    },\n\n    latestPriceURL: (ticker) => {\n        return `${iex.base_url}/stock/${ticker}/intraday-prices?token=${iex.api_token}&chartLast=1`\n        // &exactDate=20200512\n    },\n\n    formatPriceData: (data) => {\n        const stockData = data[data.length - 1]\n        const formattedData = {}\n        formattedData.price = stockData.close\n        formattedData.date = stockData.date\n        formattedData.time = stockData.label\n        formattedData.numberOfTrades = stockData.numberOfTrades\n        return formattedData\n    },\n\n    getYesterdaysClose: (ticker, lastTradingDate, callback) => {\n        if (lastTradingDate !== \"\" && lastTradingDate !== undefined) {\n            const url = stock.yesterdaysCloseURL(ticker, stock.formatDate(lastTradingDate))\n            fetch(url)\n            .then((response) => response.json())\n            .then((data) => callback(stock.formatPriceData(data)))\n        }\n    },\n\n    getLastTradingDate: () => {\n        const today = new Date().toISOString().split('T')[0].replace(/-/g, '');\n        const url = `${iex.base_url}/ref-data/us/dates/trade/last/1/${today}?token=${iex.api_token}`\n        return fetch(url).then((response) => response.json());\n    },\n\n    yesterdaysCloseURL: (ticker, lastTradingDate) => {\n        // var lastTradingDate = stock.formatDate(date);\n        // https://cloud.iexapis.com/stable/ref-data/us/dates/trade/last/1/20200512?token=pk_12ff756a55f3487285968715b4e7e7d1\n        return `${iex.base_url}/stock/${ticker}/intraday-prices?token=${iex.api_token}&chartLast=1&exactDate=${lastTradingDate}`\n    },\n\n    formatDate: (date) => {\n        return new Date(date).toISOString().split('T')[0].replace(/-/g, '')\n    }\n\n}","import React, { Component } from 'react';\n// import { iex } from '../iex.js';\nimport { stock } from '../stock.js'\nimport '../App.css';\n\n\nclass StockRow extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            price: null,\n            date: null,\n            time: null,\n            numberOfTrades: null,\n            dollar_change: null,\n            percent_change: null,\n        }\n    }\n\n    changeStyle() {\n        var color;\n        if (this.state.dollar_change > 0) {\n            color = '#4caf50'\n        } else {\n            color = '#e53935'\n        }\n        return {\n            color: color, // if it is negative put the red (#e53935)\n            fontSize: '0.9rem',\n            marginLeft: 5\n        }\n    }\n\n    applyData(data) {\n        const formattedPrice = (data.price == undefined) ? null : data.price.toFixed(2)\n        this.setState({\n            price: formattedPrice,\n            date: data.date,\n            time: data.time,\n            numberOfTrades: data.numberOfTrades,\n        });\n    }\n\n    componentDidMount() {\n        /*\n        const url = `${iex.base_url}/${this.props.ticker}/intraday-prices?token=${iex.api_token}&chartLast=1`\n        // https://cloud.iexapis.com/stable/stock/aapl/intraday-prices?token=pk_12ff756a55f3487285968715b4e7e7d1&chartLast=20\n\n        fetch(url).then((response) => response.json())\n        */\n        stock.latestPrice(this.props.ticker, this.applyData.bind(this))\n    }\n    \n    componentDidUpdate(prevProps) {\n        this.setCanRetrieveClose(prevProps)\n        if (this.state.canRetrieveClose && this.state.price != null) {\n            stock.getYesterdaysClose(this.props.ticker, this.props.lastTradingDate, (yesterday) => {\n                const dollar_change = (this.state.price - yesterday.price).toFixed(3);\n                const percent_change = (100 * dollar_change / yesterday.price).toFixed(2)\n                \n                this.setState({\n                    dollar_change: `${dollar_change}`,\n                    percent_change: `(${percent_change}%)`,\n                    canRetrieveClose: false\n                })\n            })\n        }\n    }\n\n    setCanRetrieveClose(prevProps) {\n        if (prevProps.lastTradingDate == null && this.props.lastTradingDate != null) {\n            this.setState({\n                canRetrieveClose: true\n            })\n        }\n    }\n\n    render() {\n        return (\n            /*\n            <li className=\"list-group-item\">\n                <b>{this.props.name} - {this.props.ticker}</b> ${this.state.price}\n                <span className=\"change\" style={this.changeStyle()}>\n                    {this.state.dollar_change}\n                    &nbsp;\n                    {this.state.percent_change}\n                </span>\n            </li>\n            */\n           <tr>\n               <td>{this.props.name}</td>\n               <td>{this.props.ticker}</td>\n               <td>{this.state.price}\n               <span className=\"change\" style={this.changeStyle()}>\n               &nbsp; {this.state.dollar_change} &nbsp; {this.state.percent_change}</span></td>\n               <td>{this.state.date}</td>\n               <td>{this.state.time}</td>\n               <td>{this.state.numberOfTrades}</td>\n           </tr>\n        )\n    }\n\n}\n\nexport default StockRow;\n\n/*\n    <tr>\n        <td>{this.props.name}</td>\n        <td>{this.props.ticker}</td>\n        <td>{this.state.data.price}</td>\n        <td>{this.state.data.date}</td>\n        <td>{this.state.data.time}</td>\n        <td>{this.state.data.numberOfTrades}</td>\n    </tr>\n*/","import React, { Component } from 'react';\nimport { stock } from '../stock.js';\nimport StockRow from './StockRow.js';\n\n\nclass StockList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            lastTradingDate: null\n        }\n    }\n\n    componentDidMount() {\n        stock.getLastTradingDate().then((data) => {\n            this.setState({\n                lastTradingDate: data[0].date\n            })\n        })\n    }\n\n    render() {\n        const lastTradingDate = this.state.lastTradingDate;\n        return (\n            <table className=\"table mt-5\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Ticker</th>\n                        <th>Price</th>\n                        <th>Date</th>\n                        <th>Time</th>\n                        <th>Number of Trades</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <StockRow name=\"Apple\" ticker=\"AAPL\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"Google\" ticker=\"GOOG\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"Microsoft\" ticker=\"MSFT\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"GE\" ticker=\"GE\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"Facebook\" ticker=\"FB\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"Cisco\" ticker=\"CSCO\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"PayPal\" ticker=\"PYPL\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"Adobe\" ticker=\"ADBE\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"Oracle\" ticker=\"ORCL\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"Accenture\" ticker=\"ACN\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"Baidu\" ticker=\"BIDU\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"Spotify\" ticker=\"SPOT\" lastTradingDate={lastTradingDate} />\n                    <StockRow name=\"Twitter\" ticker=\"TWTR\" lastTradingDate={lastTradingDate} />\n                </tbody>\n            </table>\n            /*\n            <ul className=\"list-group list-group-flush\">\n                <StockRow name=\"Apple\" ticker=\"aapl\" lastTradingDate={lastTradingDate} />\n                <StockRow name=\"Google\" ticker=\"goog\" lastTradingDate={lastTradingDate} />\n                <StockRow name=\"Microsoft\" ticker=\"msft\" lastTradingDate={lastTradingDate} />\n                <StockRow name=\"GE\" ticker=\"ge\" lastTradingDate={lastTradingDate} />\n            </ul>\n            */\n        )\n    }\n\n}\n\nexport default StockList;\n","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import './App.css';\n\nimport StockList from './components/StockList.js'\n// import StockRow from './components/StockRow.js'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <StockList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n<table className=\"table mt-5\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Ticker</th>\n      <th>Price</th>\n      <th>Date</th>\n      <th>Time</th>\n      <th>Number of Trades</th>\n    </tr>\n  </thead>\n  <tbody>\n    <StockRow name=\"Apple\" ticker=\"aapl\" />\n    <StockRow ticker=\"goog\" />\n    <StockRow ticker=\"msft\" />\n    <StockRow ticker=\"tsla\" />\n    <StockRow ticker=\"ibm\" />\n  </tbody>\n</table>\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}